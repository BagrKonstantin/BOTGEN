import os
from enum import Enum

import telebot
from graph.Graph import Graph
from graph.Node import Node
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, ReplyKeyboardMarkup, KeyboardButton, \
    LabeledPrice, CallbackQuery

from graph.Stages import ImageStage, ProductStage
from graph.encrypter import get_char
from graph.Stages import *


TELEGRAM_TOKEN = os.environ['TOKEN']

bot = telebot.TeleBot(TELEGRAM_TOKEN)

AbstractStage.bot = bot


import json

with open("etna.json", "r", encoding="utf-8") as file:
    data_raw = json.load(file)

graph = Graph(data_raw["stages"])




def send_message(chat_id, mes_id):
    node = graph.start
    callback = Callback(chat_id, mes_id, "0000000000000000000000000000000000000000000000000000000000000000")
    node.stager.send(callback)

def how_can_help(message):
    bot.reply_to(message, "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_keyboard)
def edit_message(node: Node, callback):
    node.stager.send(callback)

class BasicTexts(Enum):
    CHOOSE_PROGRAM = "ü•ó–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"


main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.add(KeyboardButton(text=BasicTexts.CHOOSE_PROGRAM.value))


def send_greeting(chat_id, message_id):
    bot.send_photo(
        chat_id,
        photo=open("content/promo/promo.png", "rb"),
        caption="–ü—Ä–∏–≤–µ—Ç! –Ø ETNA-–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ ¬´–ó–û–ñ –ü–∏—Ç–∞–Ω–∏–µ+–°–ø–æ—Ä—Ç¬ª –æ—Ç Wellness ETNA.\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –ø–æ–¥–±–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –¥–∞–º –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π!",
        reply_markup=main_keyboard,
        reply_to_message_id=message_id
    )

@bot.message_handler(commands=['start'])
def message_handler(message: Message):
    a = InlineKeyboardMarkup()
    a.add(InlineKeyboardButton(text="‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="a"))
    a.add(InlineKeyboardButton(text="‚ùå –≠—Ç–æ –Ω–µ —è", callback_data="b"))
    # bot.send_message(message.chat.id, "–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n–ï—Å–ª–∏ —ç—Ç–æ –≤—ã - –Ω–∞–∂–º–∏—Ç–µ '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'.", reply_markup=a)
    prices = [
    LabeledPrice(label="XTR", amount=150)
    ]
    bot.send_invoice(message.chat.id, title="–•–æ—Å—Ç–Ω–≥", description="–ü–ª–∞—Ç–∞ –∑–∞ —Ö–æ—Å—Ç–∏–Ω–≥ –±–æ—Ç–∞ –Ω–∞ 30 –¥–Ω–µ–π",
                     prices=prices,
    provider_token="",
    invoice_payload="channel_support",
    currency="XTR",
)
    # send_greeting(message.chat.id, message.message_id)

@bot.message_handler(content_types=["text"])
def message_reply(message):
    if message.text == BasicTexts.CHOOSE_PROGRAM.value:
        send_message(message.chat.id, message.message_id)
    else:
        how_can_help(message)



@bot.message_handler(content_types=['photo'])
def photo_handler(message: Message):
    print(message)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    callback = Callback(call.message.chat.id, call.message.id, call.data)
    node = graph.get_stage(callback)
    print(callback.data)
    edit_message(node, callback)
    bot.answer_callback_query(call.id, "–û—Ç–≤–µ—Ç")


bot.infinity_polling()